jamerror

C++ error handling strategy.

Goals
- Make it obvious that a function is capable of producing an error.
- Have errors represented in a standardised way.
- Control the depth of error that is visible to the error handler.

Usage
  This is a simple class with the same name as the title of this document. It's
  public API is as follows:
  {
  	
  }


Alternatives

Exceptions
- Nice for implicit error handling thanks to how it "bubbles" errors up to
  the nearest catch statement.
- Providing additional context for an error requires a try catch block at
  every level which can be a little more cumbersome that say, returning
  an error and checking it.
- Makes it unobvious if a function can throw an exception unless it's defined as
  "noexcept". Should we try-catch every function that'd not noexcept?

std::expected
- Similar to the loved and hated returning of errors in Go.
- Good at explicitly showing that a function can error.
- Can be a little clunky to frequently use "std::expected<T, E>",
  "expected.has_value()", "expected.error()", etc.
- std::expected get instantiated on every function call that uses it even when
  there is no error.

Invalid returns
- Returning NULL, -1 or who knows what? go read the docs again.
- Very compact as it uses the existing return value to communicate that
  something went wrong.
- Often requires more detail, i.e. provided by "errno" that must be managed
  sometimes but not always.
- Good for extreme efficiency but can be a little messy and error prone.

